# -*- coding: utf-8 -*-
"""2021425614 CHIPONDE TAURAI range.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bkKujKnxPIQIOkKFfk0Ssz3v8nJW2zle
"""

from math import ceil

class Range:
    """Represents a fixed sequence of integers.

    The sequence is defined by an inclusive start, an exclusive end,
    and a step value between adjacent integers in the sequence.
    """

    def __init__(self, start, stop=None, step=1):
        """Construct this range with the given start, stop, and step.

        Requires start, stop, and step to be integers, and step to be
        positive.
        """
        if stop is None:  # Handle case where only start is provided
            stop = start
            start = 0
        if step <= 0:
            raise ValueError("step must be a positive integer")

        self.start = start
        self.stop = stop
        self.step = step

    def __iter__(self):
        """Return an iterator object over this sequence."""
        return RangeIter(self.start, self.stop, self.step)

    def __len__(self):
        """Return the length of this sequence."""
        if self.start >= self.stop:
            return 0
        return (self.stop - self.start + self.step - 1) // self.step

    def __contains__(self, i):
        """Return whether the given integer is in this range."""
        if (i < self.start) or (i >= self.stop):
            return False
        return (i - self.start) % self.step == 0


class RangeIter:
    """An iterator over a range of integers."""

    def __init__(self, start, stop, step):
        """Construct an iterator with the given start, stop, and step.

        Requires start, stop, and step to be integers, and step to be
        positive.
        """
        self.current = start
        self.stop = stop
        self.step = step

    def __iter__(self):
        """Return this object."""
        return self

    def __next__(self):
        """Return the next item in the sequence.

        Raises a StopIteration if there are no more items.
        """
        if self.current >= self.stop:
            raise StopIteration
        else:
            next_value = self.current
            self.current += self.step
            return next_value