# -*- coding: utf-8 -*-
"""2021425614 CHIPONDE TAURAI life.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HNpOI-IDyTvInT4jBZX16GSxeOxbr74Z
"""

import os
import time
import numpy as np  # Use numpy as np for consistency

def make_grid(rows, cols, live_cells):
    """Construct a rows x cols grid with the given live cells."""
    grid = np.zeros((rows + 2, cols + 2), dtype=np.int8)
    for cell in live_cells:
        grid[cell[0] + 1, cell[1] + 1] = 1  # Offset by 1 for the border
    return grid


def print_grid(grid, interactive=False):
    """Print a grid."""
    if interactive:
        time.sleep(0.05)
        os.system('clear')
    rows, cols = grid.shape
    print('-' * cols)
    for i in range(1, rows - 1):
        print('|', end='')
        for j in range(1, cols - 1):
            print('*' if grid[i, j] else ' ', end='')
        print('|')
    print('-' * cols)
    print()


def timestep(current_grid, next_grid):
    """Simulate a single timestep of the Game of Life."""
    interior_rows = range(1, current_grid.shape[0] - 1)
    interior_cols = range(1, current_grid.shape[1] - 1)

    for i in interior_rows:
        for j in interior_cols:
            # Count live neighbors
            live_neighbors = (
                current_grid[i-1, j-1] + current_grid[i-1, j] + current_grid[i-1, j+1] +
                current_grid[i, j-1] + current_grid[i, j+1] +
                current_grid[i+1, j-1] + current_grid[i+1, j] + current_grid[i+1, j+1]
            )

            # Apply Conway's rules
            if current_grid[i, j] == 1:  # Cell is currently alive
                if live_neighbors < 2 or live_neighbors > 3:
                    next_grid[i, j] = 0  # Cell dies
                else:
                    next_grid[i, j] = 1  # Cell stays alive
            else:  # Cell is currently dead
                if live_neighbors == 3:
                    next_grid[i, j] = 1  # Cell becomes alive
                else:
                    next_grid[i, j] = 0  # Cell stays dead


def simulate(rows, cols, steps, live_cells, interactive=False):
    """Simulate full Game of Life."""
    current_grid = make_grid(rows, cols, live_cells)
    next_grid = make_grid(rows, cols, [])

    for step in range(steps):
        print_grid(current_grid, interactive)
        timestep(current_grid, next_grid)

        # Swap grids
        current_grid, next_grid = next_grid, current_grid

    print_grid(current_grid, interactive)  # Print the final state


if __name__ == "__main__":
    # Two gliders: one top-left, one in the middle
    glider = [
        (1, 2), (2, 3), (3, 1), (3, 2), (3, 3),
        (10, 10), (10, 11), (11, 10), (11, 12), (12, 11),
    ]
    simulate(rows=20, cols=40, steps=100, live_cells=glider, interactive=True)
